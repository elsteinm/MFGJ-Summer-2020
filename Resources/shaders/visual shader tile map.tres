[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 2

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Input:4

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out3p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( -533.54, 85.6304 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1120, 280 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( 120, 260 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( 100, 340 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 420, 260 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 4, 0, 5, 2, 5, 1, 0, 1, 5, 0, 0, 0 )
